--
-- Generated by RecordFlux 0.9.1.dev18+ge578157d on 2023-04-12
--
-- Copyright (C) 2018-2023 AdaCore GmbH
--
-- This file is distributed under the terms of the GNU Affero General Public License version 3.
--

pragma Style_Checks ("N3aAbCdefhiIklnOprStux");
pragma Warnings (Off, "redundant conversion");
with RFLX.RFLX_Types;

package RFLX.RSP with
  SPARK_Mode
is

   type Message_Kind is (Request_Msg, Answer_Msg) with
     Size =>
       8;
   for Message_Kind use (Request_Msg => 0, Answer_Msg => 1);

   use type RFLX.RFLX_Types.Base_Integer;

   function Valid_Message_Kind (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 0 | 1);

   function To_Base_Integer (Enum : RFLX.RSP.Message_Kind) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Request_Msg =>
             0,
          when Answer_Msg =>
             1));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Message_Kind is
     ((case Val is
          when 0 =>
             Request_Msg,
          when 1 =>
             Answer_Msg,
          when others =>
             RFLX.RSP.Message_Kind'Last))
    with
     Pre =>
       Valid_Message_Kind (Val);

   pragma Warnings (On, "unreachable branch");

   type Request_Kind is (Request_Store, Request_Get) with
     Size =>
       8;
   for Request_Kind use (Request_Store => 1, Request_Get => 2);

   function Valid_Request_Kind (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 1 | 2);

   function To_Base_Integer (Enum : RFLX.RSP.Request_Kind) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Request_Store =>
             1,
          when Request_Get =>
             2));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Request_Kind is
     ((case Val is
          when 1 =>
             Request_Store,
          when 2 =>
             Request_Get,
          when others =>
             RFLX.RSP.Request_Kind'Last))
    with
     Pre =>
       Valid_Request_Kind (Val);

   pragma Warnings (On, "unreachable branch");

   type Answer_Kind is (Answer_Data, Answer_Result) with
     Size =>
       8;
   for Answer_Kind use (Answer_Data => 0, Answer_Result => 1);

   function Valid_Answer_Kind (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 0 | 1);

   function To_Base_Integer (Enum : RFLX.RSP.Answer_Kind) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Answer_Data =>
             0,
          when Answer_Result =>
             1));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Answer_Kind is
     ((case Val is
          when 0 =>
             Answer_Data,
          when 1 =>
             Answer_Result,
          when others =>
             RFLX.RSP.Answer_Kind'Last))
    with
     Pre =>
       Valid_Answer_Kind (Val);

   pragma Warnings (On, "unreachable branch");

   type Length is range 0 .. 255 with
     Size =>
       8;

   function Valid_Length (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 255);

   function To_Base_Integer (Val : RFLX.RSP.Length) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Length is
     (RFLX.RSP.Length (Val))
    with
     Pre =>
       Valid_Length (Val);

   type Stack_Identifier is range 0 .. 9 with
     Size =>
       8;

   function Valid_Stack_Identifier (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 9);

   function To_Base_Integer (Val : RFLX.RSP.Stack_Identifier) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Stack_Identifier is
     (RFLX.RSP.Stack_Identifier (Val))
    with
     Pre =>
       Valid_Stack_Identifier (Val);

   type Server_Result_Kind is (Ok, Invalid_Packet, Got_Answer_Packet, Got_Exception, Stack_Full) with
     Size =>
       8;
   for Server_Result_Kind use (Ok => 0, Invalid_Packet => 1, Got_Answer_Packet => 2, Got_Exception => 3, Stack_Full => 4);

   function Valid_Server_Result_Kind (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 0 | 1 | 2 | 3 | 4);

   function To_Base_Integer (Enum : RFLX.RSP.Server_Result_Kind) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Ok =>
             0,
          when Invalid_Packet =>
             1,
          when Got_Answer_Packet =>
             2,
          when Got_Exception =>
             3,
          when Stack_Full =>
             4));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Server_Result_Kind is
     ((case Val is
          when 0 =>
             Ok,
          when 1 =>
             Invalid_Packet,
          when 2 =>
             Got_Answer_Packet,
          when 3 =>
             Got_Exception,
          when 4 =>
             Stack_Full,
          when others =>
             RFLX.RSP.Server_Result_Kind'Last))
    with
     Pre =>
       Valid_Server_Result_Kind (Val);

   pragma Warnings (On, "unreachable branch");

   type Store_Result is (Store_Ok, Store_Fail) with
     Size =>
       8;
   for Store_Result use (Store_Ok => 0, Store_Fail => 1);

   function Valid_Store_Result (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 0 | 1);

   function To_Base_Integer (Enum : RFLX.RSP.Store_Result) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Store_Ok =>
             0,
          when Store_Fail =>
             1));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Store_Result is
     ((case Val is
          when 0 =>
             Store_Ok,
          when 1 =>
             Store_Fail,
          when others =>
             RFLX.RSP.Store_Result'Last))
    with
     Pre =>
       Valid_Store_Result (Val);

   pragma Warnings (On, "unreachable branch");

end RFLX.RSP;
