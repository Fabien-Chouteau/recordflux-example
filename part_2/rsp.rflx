package RSP is

   type Message_Kind is (Request_Msg => 0,
                         Answer_Msg  => 1)
      with Size => 8;

   type Request_Kind is (Request_Select_Stack => 0,
                         Request_Store        => 1,
                         Request_Get          => 2)
      with Size => 8;

   type Answer_Kind is (Answer_Data  => 0,
                        Answer_Error => 1)
      with Size => 8;

   type Length is range 0 .. 255
      with Size => 8;

   type Stack_Identifier is range 0 .. 9
      with Size => 8;

   type Request_Message is
      message
         Kind : Request_Kind
            then Length if Kind = Request_Store
            then Stack_Id if Kind = Request_Select_Stack;
         Length : Length
            then Payload with Size => Length * 8;
         Payload : Opaque;
         Stack_Id : Stack_Identifier;
      end message;

   type Answer_Message is
      message
         Kind : Answer_Kind
            then Length if Kind = Answer_Data;
         Length : Length
            then Payload with Size => Length * 8;
         Payload : Opaque;
      end message;

   type RSP_Message is
      message
         Kind : Message_Kind
            then Request if Kind = Request_Msg
            then Answer if Kind = Answer_Msg;
         Request : Request_Message;
         Answer  : Answer_Message;
      end message;

   type Server_Error_Kind is (Invalid_Packet,
                              Got_Answer_Packet,
                              Stack_Id_Not_Set,
                              Got_Exception,
                              Stack_Full)
      with Size => 8;

   generic
      Chan : Channel with Readable, Writable;
      with function Store_Data (Stack_Id : Stack_Identifier; Data : Opaque) return Boolean;
      with function Handle_Error (Err : Server_Error_Kind) return Boolean;
   session Server is
      Msg : RSP_Message;
      Answer : RSP_Message;
      Id : Stack_Identifier;
   begin

      state Receive_Stack_Select is
      begin
         Chan'Read(Msg);
      transition
         goto Verify_Stack_Select
      end Receive_Stack_Select;

      state Verify_Stack_Select is
      begin
      transition
         goto Invalid_Packet_Error if Msg'Valid = False
         goto Got_Answer_Packet_Error if Msg.Kind /= Request_Msg
         goto Stack_Id_Not_Set_Error if Msg.Request_Kind /= Request_Select_Stack
         goto Select_Stack
      end Verify_Stack_Select;

      state Select_Stack is
      begin
         Id := Msg.Request_Stack_Id;
      transition
         goto Receive_Data_Request
      exception
         goto Exception_Error
      end Select_Stack;

      state Receive_Data_Request is
      begin
         Chan'Read(Msg);
      transition
         goto Verify_Data_Request
      end Receive_Data_Request;

      state Verify_Data_Request is
      begin
      transition
         goto Invalid_Packet_Error if Msg'Valid = False
         goto Got_Answer_Packet_Error if Msg.Kind /= Request_Msg
         goto Store if Msg.Request_Kind = Request_Store
         goto Get if Msg.Request_Kind = Request_Get
         goto Select_Stack if Msg.Request_Kind = Request_Select_Stack
         goto Exception_Error
      end Verify_Data_Request;

      state Store is
         Store_Data_Error : Boolean;
      begin
         Store_Data_Error := Store_Data (Id, Msg.Request_Payload);
      transition
         goto Stack_Full_Error if Store_Data_Error
         goto Receive_Data_Request
      exception
         goto Exception_Error
      end Store;

      state Get is
      begin
         Answer := RSP_Message'(Kind => Answer_Msg,
                                Answer_Kind => Answer_Data,
                                Answer_Length => 1,
                                Answer_Payload => [42, 42]);
      transition
         goto Send_Data_Answer
      exception
         goto Exception_Error
      end Get;

      state Send_Data_Answer is
      begin
         Chan'Write(Answer);
      transition
         goto Receive_Data_Request
      end Send_Data_Answer;

      state Exception_Error is
         Unused : Boolean;
      begin
         Unused := Handle_Error (Got_Exception);
      transition
         goto null
      end Exception_Error;

      state Invalid_Packet_Error is
         Unused : Boolean;
      begin
         Unused := Handle_Error (Invalid_Packet);
      transition
         goto null
      end Invalid_Packet_Error;

      state Got_Answer_Packet_Error is
         Unused : Boolean;
      begin
         Unused := Handle_Error (Got_Answer_Packet);
      transition
         goto null
      end Got_Answer_Packet_Error;

      state Stack_Id_Not_Set_Error is
         Unused : Boolean;
      begin
         Unused := Handle_Error (Stack_Id_Not_Set);
      transition
         goto null
      end Stack_Id_Not_Set_Error;

      state Stack_Full_Error is
         Unused : Boolean;
      begin
         Unused := Handle_Error (Stack_Full);
      transition
         goto null
      end Stack_Full_Error;

   end Server;

end RSP;
