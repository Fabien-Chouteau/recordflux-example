package RSP is

   type Message_Kind is (Request_Msg => 0,
                         Answer_Msg  => 1)
      with Size => 8;

   type Request_Kind is (Request_Store => 1,
                         Request_Get   => 2)
      with Size => 8;

   type Answer_Kind is (Answer_Data   => 0,
                        Answer_Result => 1)
      with Size => 8;

   type Length is range 0 .. 10
      with Size => 8;

   type Payload is
      message
         Length : Length;
         Data   : Opaque with Size => Length * 8;
      end message;

   type Stack_Identifier is range 0 .. 9
      with Size => 8;

   type Request_Message is
      message
         Stack_Id : Stack_Identifier;
         Kind : Request_Kind
            then Payload  if Kind = Request_Store
            then null     if Kind = Request_Get;
         Payload : Payload;
      end message;

   type Server_Result_Kind is (Ok,
                               Invalid_Packet,
                               Got_Answer_Packet,
                               Got_Exception,
                               Stack_Full)
      with Size => 8;

   type Answer_Message is
      message
         Kind : Answer_Kind
            then Payload if Kind = Answer_Data
            then Server_Result if Kind = Answer_Result;
         Payload : Payload
            then null;
         Server_Result : Server_Result_Kind
            then null;
      end message;

   type RSP_Message is
      message
         Kind : Message_Kind
            then Request if Kind = Request_Msg
            then Answer if Kind = Answer_Msg;
         Request : Request_Message
            then null;
         Answer  : Answer_Message;
      end message;

   type Store_Result is (Store_Ok, Store_Fail)
      with Size => 8;

   generic
      Chan : Channel with Readable, Writable;
      with function Store_Data (Stack_Id : Stack_Identifier; Data : Opaque) return Store_Result;
      with function Get_Data (Stack_Id : Stack_Identifier) return Payload;
   session Server is
      Request : RSP_Message;
      Answer  : RSP_Message;
      Result  : Server_Result_Kind;
   begin

      state Receive_Request is
      begin
         Chan'Read (Request);
      transition
         goto Invalid_Packet_Error    if Request'Valid = False
         goto Got_Answer_Packet_Error if Request.Kind /= Request_Msg
         goto Store                   if Request.Request_Kind = Request_Store
         goto Get                     if Request.Request_Kind = Request_Get
         goto Exception_Error
      end Receive_Request;

      state Store is
         St_Result : Store_Result;
      begin
         St_Result := Store_Data (Request.Request_Stack_Id,
                                  Request.Request_Payload_Data);
      transition
         goto Stack_Full_Error if St_Result = Store_Fail
         goto Answer_Success
      exception
         goto Exception_Error
      end Store;

      state Answer_Success is
      begin
         Result := Ok;
      transition
         goto Setup_Answer
      end Answer_Success;

      state Get is
         Payload : Payload;
      begin
         Payload := Get_Data (Request.Request_Stack_Id);
         Answer := RSP_Message'(Kind => Answer_Msg,
                                Answer_Kind => Answer_Data,
                                Answer_Payload_Length => Payload.Length,
                                Answer_Payload_Data   => Payload.Data);
      transition
         goto Send_Data_Answer
      exception
         goto Exception_Error
      end Get;

      state Send_Data_Answer is
      begin
         Chan'Write(Answer);
      transition
         goto Receive_Request
      end Send_Data_Answer;

      state Exception_Error is
      begin
         Result := Got_Exception;
      transition
         goto Setup_Answer
      end Exception_Error;

      state Invalid_Packet_Error is
      begin
         Result := Invalid_Packet;
      transition
         goto Setup_Answer
      end Invalid_Packet_Error;

      state Got_Answer_Packet_Error is
      begin
         Result := Got_Answer_Packet;
      transition
         goto Setup_Answer
      end Got_Answer_Packet_Error;

      state Stack_Full_Error is
      begin
         Result := Stack_Full;
      transition
         goto Setup_Answer
      end Stack_Full_Error;

      state Setup_Answer is
      begin
         Answer := RSP_Message'(Kind => Answer_Msg,
                                Answer_Kind => Answer_Result,
                                Answer_Server_Result => Result);
      transition
         goto Send_Answer
      exception
         goto null
      end Setup_Answer;

      state Send_Answer is
      begin
         Chan'Write(Answer);
      transition
         goto Receive_Request
      end Send_Answer;
   end Server;

end RSP;
