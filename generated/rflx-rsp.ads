--
-- Generated by RecordFlux 0.10.0 on 2023-06-05
--
-- Copyright (C) 2018-2023 AdaCore GmbH
--
-- This file is distributed under the terms of the GNU Affero General Public License version 3.
--

pragma Style_Checks ("N3aAbCdefhiIklnOprStux");
pragma Warnings (Off, "redundant conversion");
with RFLX.RFLX_Types;

package RFLX.RSP with
  SPARK_Mode
is

   type Request_Kind is (Request_Store, Request_Get) with
     Size =>
       8;
   for Request_Kind use (Request_Store => 21, Request_Get => 254);

   use type RFLX.RFLX_Types.Base_Integer;

   function Valid_Request_Kind (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 21 | 254);

   function To_Base_Integer (Enum : RFLX.RSP.Request_Kind) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Request_Store =>
             21,
          when Request_Get =>
             254));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Request_Kind is
     ((case Val is
          when 21 =>
             Request_Store,
          when 254 =>
             Request_Get,
          when others =>
             RFLX.RSP.Request_Kind'Last))
    with
     Pre =>
       Valid_Request_Kind (Val);

   pragma Warnings (On, "unreachable branch");

   type Payload_Length is range 0 .. 255 with
     Size =>
       8;

   function Valid_Payload_Length (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 255);

   function To_Base_Integer (Val : RFLX.RSP.Payload_Length) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Payload_Length is
     (RFLX.RSP.Payload_Length (Val))
    with
     Pre =>
       Valid_Payload_Length (Val);

   type Stack_Identifier is range 0 .. 9 with
     Size =>
       8;

   function Valid_Stack_Identifier (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 9);

   function To_Base_Integer (Val : RFLX.RSP.Stack_Identifier) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.RSP.Stack_Identifier is
     (RFLX.RSP.Stack_Identifier (Val))
    with
     Pre =>
       Valid_Stack_Identifier (Val);

end RFLX.RSP;
